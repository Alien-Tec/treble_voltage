From 4a9775a6f31a6050fe53e05199a025dae93a0fb6 Mon Sep 17 00:00:00 2001
From: Pierre-Hugues Husson <phh@phh.me>
Date: Wed, 14 Dec 2022 17:21:00 -0500
Subject: [PATCH] Call Samsung's ISehSysInputDev to report screen state to
 touchscreen driver

This fixes touchscreen not waking up on Galaxy F23
---
 services/core/Android.bp                      |  1 +
 .../server/display/LocalDisplayAdapter.java   | 21 +++++++++++++++++++
 2 files changed, 22 insertions(+)

diff --git a/services/core/Android.bp b/services/core/Android.bp
index 2091c0c4..d69f3601 100644
--- a/services/core/Android.bp
+++ b/services/core/Android.bp
@@ -176,6 +176,7 @@ java_library_static {
         "overlayable_policy_aidl-java",
         "SurfaceFlingerProperties",
         "com.android.sysprop.watchdog",
+        "vendor.samsung.hardware.sysinput-V1.2-java", // HIDL
         "faceunlock_framework",
         "kotlin-stdlib",
         "kotlinx_coroutines_android",
diff --git a/services/core/java/com/android/server/display/LocalDisplayAdapter.java b/services/core/java/com/android/server/display/LocalDisplayAdapter.java
index 36b73c65..48940cb6 100644
--- a/services/core/java/com/android/server/display/LocalDisplayAdapter.java
+++ b/services/core/java/com/android/server/display/LocalDisplayAdapter.java
@@ -33,6 +33,7 @@ import android.os.Trace;
 import android.util.DisplayUtils;
 import android.util.LongSparseArray;
 import android.util.Slog;
+import android.util.Log;
 import android.util.SparseArray;
 import android.view.Display;
 import android.view.DisplayAddress;
@@ -48,6 +49,8 @@ import com.android.server.LocalServices;
 import com.android.server.lights.LightsManager;
 import com.android.server.lights.LogicalLight;
 
+import vendor.samsung.hardware.sysinput.V1_1.ISehSysInputDev;
+
 import java.io.PrintWriter;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -228,6 +231,8 @@ final class LocalDisplayAdapter extends DisplayAdapter {
 
         private DisplayEventReceiver.FrameRateOverride[] mFrameRateOverrides =
                 new DisplayEventReceiver.FrameRateOverride[0];
+        private boolean triedSamsungHal = false;
+        private ISehSysInputDev samsungSysinput = null;
 
         LocalDisplayDevice(IBinder displayToken, long physicalDisplayId,
                 SurfaceControl.StaticDisplayInfo staticDisplayInfo,
@@ -815,6 +820,12 @@ final class LocalDisplayAdapter extends DisplayAdapter {
                             }
                             mSidekickActive = false;
                         }
+                        if (!triedSamsungHal) {
+                            triedSamsungHal = true;
+                            try {
+                                samsungSysinput = ISehSysInputDev.getService();
+                            } catch(Throwable t) {}
+                        }
                         final int mode = getPowerModeForState(state);
                         Trace.traceBegin(Trace.TRACE_TAG_POWER, "setDisplayState("
                                 + "id=" + physicalDisplayId
@@ -825,6 +836,16 @@ final class LocalDisplayAdapter extends DisplayAdapter {
                         } finally {
                             Trace.traceEnd(Trace.TRACE_TAG_POWER);
                         }
+
+                        if (samsungSysinput != null) {
+                           try {
+                                Log.d("PHH", "setTspEnable 1, " + state + ", false");
+                                samsungSysinput.setTspEnable(1, state, false);
+                            } catch(Throwable t) {
+                                Log.d("PHH", "Failed settings tsp enable", t);
+                            }
+                        }
+
                         setCommittedState(state);
                         // If we're entering a suspended (but not OFF) power state and we
                         // have a sidekick available, tell it now that it can take control.
-- 
2.39.2

